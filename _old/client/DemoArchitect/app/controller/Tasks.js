/*
 * File: app/controller/Tasks.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('DemoArchitect.controller.Tasks', {
    extend: 'Ext.app.Controller',

    stores: [
        'Tasks'
    ],

    refs: [
        {
            ref: 'detailsPanel',
            selector: '#detailsPanel'
        },
        {
            ref: 'detailsToolbar',
            selector: '#detailsPanel #detailsToolbar'
        }
    ],

    view: function(target, record) {
        var details = this.getDetailsPanel(),	// Get detail panel via controller ref
        	toolbar = this.getDetailsToolbar();	// Get detail panel toolbar via controller ref

        // Update the detail panel with the selected row's data
        details.update(record.data);

        // Show toolbar
        toolbar.show();
    },

    add: function(target) {
        var record = Ext.create('DemoArchitect.model.Task', {dueDate: new Date()}), //create record with date
            win = Ext.create('widget.taskform'),	// Create new form window
            form = win.down('form').getForm();	// Get form within window

        // Associate model with form
        form.loadRecord(record);
        win.setTitle('Add New Task');

        win.isNewRecord = true;

        // Show window
        win.show();
    },

    edit: function(target) {
        var grid = Ext.ComponentQuery.query('gridpanel')[0],    // grid
            record = grid.getSelectionModel().getSelection()[0],// Get current task
            win = Ext.create('widget.taskform'),				// Create new form window
            form = win.down('form').getForm();			// Get form within window


        //prevent editing if record not selected
        if(!record){
            return false;
        }

        // Load task model into form
        form.loadRecord(record);


        // Show window
        win.show();

        win.setTitle('Edit Task: ' + record.get('title'));

        win.isNewRecord = false;
    },

    save: function(target) {
        var me = this,
            record,
            form = target.up('form').getForm(),			// Get parent form
            win = target.up('window'),           // Get parent window
            store = Ext.getStore('Tasks'),
            grid = Ext.ComponentQuery.query('gridpanel')[0],
            detailsPanel = me.getDetailsPanel(),
            detailsToolbar = me.getDetailsToolbar();	// Get details panel toolbar

        // Update associated task with form values
        var errors = form.updateRecord();

        //validate Form
        if (form.isValid()) {

            record = form.getRecord();
            //form.updateRecord(record);

            record.save({
                callback:function(records, operation, success){

                    if(success){
                        record.commit(); // ##Juris :: Commit record in the store
                        if(win.isNewRecord){

                            //insert action
                            store.add(records);

                            //focus and select newly addded record
                            grid.getSelectionModel().select(records);

                            Ext.Msg.alert('Success', 'New task added');
                        }else{
                            //update action
                            Ext.Msg.alert('Success', 'Task successfully updated');
                        }
                        win.destroy();

                        // Update detail panel
                        detailsPanel.update(record.getData());

                        //show toolbar
                        detailsToolbar.show();
                    }else{
                        var exception = operation.getError();
                        if (exception && exception.errors) {
                            form.markInvalid(exception.errors);
                        }
                        console.log('failure', record, operation, exception);
                        win.destroy();
                    }
                }
            });
        }else{
            // Show errors on form
            form.markInvalid(errors);
        }
    },

    cancelEdit: function(target) {

        // Get the window and close it
        var formWindow = target.up("window");
        	formWindow.destroy();

    },

    remove: function(target) {
        var me = this;

        // Confirm this delete
        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this task?', function(btn) {

            // User confirmed yes
            if (btn == 'yes') {

                var store = me.getTasksStore(),					// Get tasks store
                    grid = Ext.ComponentQuery.query('gridpanel')[0], // grid
                    record = grid.getSelectionModel().getSelection()[0],
                    detailsPanel = me.getDetailsPanel(),		// Get details panel
                    detailsToolbar = me.getDetailsToolbar();	// Get details panel toolbar

                store.remove(record);

                record.destroy({
                    callback: function(records, operation){
                        var success = operation.wasSuccessful();

                        if(success){
                            console.log('Sucessfully removed record: ', arguments);
                            Ext.Msg.alert('Success', 'Record removed sucessfully');
                        }else{
                            store.insert(record.index, record);
                            console.log('Failure to remove record: ', arguments);
                            Ext.Msg.alert('Server side Error', 'Unable to remove the record');
                        }

                        detailsToolbar.hide();
                        detailsPanel.update(null);
                    }
                });
            }
        });
    },

    init: function(application) {
        this.control({
            "#gridPanel": {
                select: this.view
            },
            "#mainPanel #addButton": {
                click: this.add
            },
            "#detailsPanel #editButton": {
                click: this.edit
            },
            "#recordForm #saveButton": {
                click: this.save
            },
            "#recordForm #cancelButton": {
                click: this.cancelEdit
            },
            "#detailsPanel #removeButton": {
                click: this.remove
            }
        });
    }

});
